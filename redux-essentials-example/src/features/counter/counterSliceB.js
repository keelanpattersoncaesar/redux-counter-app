// createAsyncThunk function, accepts redux action type string, callback function that returns a promise
// createSlice allows use to safely mutate state, automatically generates action creators that corresponds to each case reducer function we provide
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { fetchCountB } from "./counterAPIB";

const initialState = {
  value: 0,
  status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsyncB = createAsyncThunk(
  "counterB/fetchCountB",
  async (amount) => {
    const response = await fetchCountB(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const counterSliceB = createSlice({
  name: "counterB",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    incrementB: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    decrementB: (state) => {
      state.value -= 1;
    },
    incrementBy5B: (state) => {
      state.value += 5;
    },
    decrementBy5B: (state) => {
      state.value -= 5;
    },

    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmountB: (state, action) => {
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsyncB.pending, (state) => {
        state.status = "loading";
      })
      .addCase(incrementAsyncB.fulfilled, (state, action) => {
        state.status = "idle";
        state.value += action.payload;
      });
  },
});

export const {
  incrementB,
  decrementB,
  incrementByAmountB,
  decrementBy5B,
  incrementBy5B,
} = counterSliceB.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCountB = (state) => state.counterB.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOddB = (amount) => (dispatch, getState) => {
  const currentValue = selectCountB(getState());
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmountB(amount));
  }
};

export const incrementIfEvenB = (amount) => (dispatch, getState) => {
  const currentValue = selectCountB(getState());
  if (currentValue % 2 === 0) {
    dispatch(incrementByAmountB(amount));
  }
};

export default counterSliceB.reducer;
